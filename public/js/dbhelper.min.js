"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,n,t){return n&&_defineProperties(e.prototype,n),t&&_defineProperties(e,t),e}var DBHelper=function(){function o(){_classCallCheck(this,o)}return _createClass(o,null,[{key:"fetchRestaurants",value:function(t){fetch("".concat(o.DATABASE_URL,"/restaurants")).then(function(e){if(200===e.status)e.json().then(function(e){t(null,e)});else{var n="Request failed. Returned status of ".concat(xhr.status);t(n,null)}}).catch(function(e){})}},{key:"fetchReviews",value:function(t){fetch("".concat(o.DATABASE_URL,"/reviews")).then(function(e){if(200===e.status)e.json().then(function(e){t(null,e)});else{var n="Request failed. Returned status of ".concat(xhr.status);t(n,null)}}).catch(function(e){})}},{key:"fetchRestaurantById",value:function(a,u){o.fetchRestaurants(function(e,n){if(e)u(e,null);else{var t=n.find(function(e){return e.id==a});t?u(null,t):u("Restaurant does not exist",null)}})}},{key:"fetchReviewsByRestaurantId",value:function(e,t){fetch("".concat(o.DATABASE_URL,"/reviews/?restaurant_id=").concat(e)).then(function(e){if(200===e.status)e.json().then(function(e){t(null,e)});else{var n="Request failed. Returned status of ".concat(xhr.status);t(n,null)}}).catch(function(e){})}},{key:"fetchRestaurantByCuisine",value:function(a,u){o.fetchRestaurants(function(e,n){if(e)u(e,null);else{var t=n.filter(function(e){return e.cuisine_type==a});u(null,t)}})}},{key:"fetchRestaurantByNeighborhood",value:function(a,u){o.fetchRestaurants(function(e,n){if(e)u(e,null);else{var t=n.filter(function(e){return e.neighborhood==a});u(null,t)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(a,u,r){o.fetchRestaurants(function(e,n){if(e)r(e,null);else{var t=n;"all"!=a&&(t=t.filter(function(e){return e.cuisine_type==a})),"all"!=u&&(t=t.filter(function(e){return e.neighborhood==u})),r(null,t)}})}},{key:"fetchNeighborhoods",value:function(u){o.fetchRestaurants(function(e,t){if(e)u(e,null);else{var a=t.map(function(e,n){return t[n].neighborhood}),n=a.filter(function(e,n){return a.indexOf(e)==n});u(null,n)}})}},{key:"fetchCuisines",value:function(u){o.fetchRestaurants(function(e,t){if(e)u(e,null);else{var a=t.map(function(e,n){return t[n].cuisine_type}),n=a.filter(function(e,n){return a.indexOf(e)==n});u(null,n)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id=".concat(e.id)}},{key:"imageUrlForRestaurant",value:function(e){return"public/img/".concat(e.id,".jpg")}},{key:"imageAltforRestaurant",value:function(e){return e.imageAlt}},{key:"mapMarkerForRestaurant",value:function(e,n){var t=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:o.urlForRestaurant(e)});return t.addTo(newMap),t}},{key:"sendToggleFav",value:function(e,n){(new Headers).append("Content-Type","application/json");var t="http://localhost:1337/restaurants/".concat(e,"/?is_favorite=").concat(n);this.sendRequest(t,{method:"PUT",mode:"cors",cache:"no-cache",credentials:"same-origin"})}},{key:"addReviews",value:function(e){var n=new Headers;n.append("Content-Type","application/json");var t={method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:n,body:JSON.stringify(e)};this.sendRequest("http://localhost:1337/reviews/",t)}},{key:"sendRequest",value:function(e,n){fetch(e,n).then(function(e){if(!e.ok)throw Error(e.statusText);return e.json()}).then(function(e){console.log("Sent",e)}).catch(function(e){return console.log("Failed",e)})}},{key:"DATABASE_URL",get:function(){return"http://localhost:".concat(1337)}}]),o}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
